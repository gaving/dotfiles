#!/bin/zsh
# zsh config

# {{{1 environment

unlimit
limit coredumpsize 0
umask 022

export EDITOR=vim
export HISTFILE=~/.zsh/history
export HISTSIZE=1000000
export HOST=${HOST:-$HOSTNAME}
export LOGCHECK=30
export PAGER='less'
export REPORTTIME=5
export SAVEHIST=$HISTSIZE
export SPROMPT='...huh? you meant "%r", right? [yn] '
export LESS="-R -M --shift 5"
export LESSCOLOR=1
unset LESSOPEN

# {{{1 paths

path=($HOME/local/bin /bin /usr/local/bin /usr/bin $path)
manpath=($HOME/local/man /usr/man /usr/local/man /usr/share/man)
fpath=(~/.zsh/functions $fpath)

if (( EUID == 0 )); then
    path=(/sbin /usr/sbin /usr/local/sbin $path)
fi

typeset -gU path manpath fpath

autoload -U ~/.zsh/functions/*(:t)

# {{{1 options

setopt \
    all_export           \
    auto_cd              \
    auto_name_dirs       \
    auto_pushd           \
    braceccl             \
    chase_links          \
    clobber              \
    complete_aliases     \
    correctall           \
    extended_glob        \
    hist_ignore_all_dups \
    hist_find_no_dups    \
    hist_save_no_dups    \
    hist_ignore_space    \
    hist_reduce_blanks   \
    list_packed          \
    list_types           \
    mark_dirs            \
    no_beep              \
    no_hup               \
    no_flow_control      \
    notify               \
    path_dirs            \
    rec_exact            \
    rm_star_silent       \
    share_history

# {{{1 autoload

autoload -U compinit && compinit
autoload -U promptinit && promptinit
autoload -U url-quote-magic && zle -N self-insert url-quote-magic
autoload -U zargs
autoload -U zcalc
autoload -U zmv
autoload -U zsh-mime-setup && zsh-mime-setup

zcalc () { print $(( ans = ${@:-ans} )) }
alias calc='noglob zcalc'

# {{{1 keys

typeset -g -A key
stty pass8
KEYTIMEOUT=1

bindkey -e
bindkey '^?' backward-delete-char
bindkey '^[[1~' beginning-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[4~' end-of-line
bindkey '^[[8~' end-of-line
bindkey '^[OF' end-of-line
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char
bindkey '^[[D' backward-char
bindkey '^Q' push-line
bindkey '^[a' beginning-of-line
bindkey '^[e' end-of-line
bindkey "^@"  _history-complete-older
bindkey "\ee" vi-find-next-char
bindkey "\eE" vi-find-prev-char

bindkey -s '^F' '^Upushd >/dev/null; dirs -v^M'
bindkey -s '^B' '^Upopd >/dev/null; dirs -v^M'

zmodload -i zsh/complist
bindkey -M menuselect '^M' .accept-line # enter on the menu accepts the line

autoload -U backward-kill-word-match
zle -N backward-kill-word-match
bindkey '^W' backward-kill-word-match
zstyle ':zle:*' word-style normal
zstyle ':zle:*' word-chars ${WORDCHARS//\//}

zle_highlight=(isearch:fg="228",bold)

# put the output of the last command on the command line
zmodload -i zsh/parameter
insert-last-command-output() {
    LBUFFER+="$(eval $history[$((HISTCMD-1))])"
}
zle -N insert-last-command-output
bindkey "^Xl" insert-last-command-output

rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

# re-run the previous command with sudo
rerun-with-sudo () {
    LBUFFER="sudo !!"
    zle accept-line
}
zle -N rerun-with-sudo
bindkey '^Xx' rerun-with-sudo

# git clone suffix
git-clone-suffix() { git clone $1 ${$(basename $1)%.git} }
alias -s 'git'='git-clone-suffix'

# c-z toggles between suspend and resume
resume-job() {
    zle push-input
    BUFFER="fg"
    zle accept-line
}
zle -N resume-job
bindkey "^Z" resume-job

# {{{1 title
watch=notme
WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"

preexec() {
    emulate -L zsh
    local -a cmd; cmd=(${(z)1})
    title $cmd[1]:t "$cmd[2,-1]"
}

title() {
    if [[ $TERM == "screen" ]]; then
        # set hard status to last used command
        # and main window title to the current directory
        print -n "\eP\e]0;${@}\C-G\e\\"
        print -nR $'\033k'$1$'\033'\\

        #print -nR $'\033]0;'$2$'\a'
    elif [[ $TERM == "xterm" || $TERM == "rxvt" || $TERM == "rxvt-unicode" ]]; then
        # use this one instead for xterms:
        print -nR $'\033]0;'$*$'\a'
    fi
}
